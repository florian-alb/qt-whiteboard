@startuml
title Architecture 3-tiers – Whiteboard P2P UDP (Qt – console, C++)

' WhiteboardApp = Orchestrateur principal
class WhiteboardApp {
    - display: DisplayController
    - business: BusinessController
    - network: NetworkManager
    - data: DataManager
    --
    + run()
}

' Présentation (console IHM)
class DisplayController {
    + signal textEntered(txt: QString)
    + slot displayText(txt: QString)
    --
    + readInput()
}

' Métier : logique et synchronisation
class BusinessController {
    + slot onTextEntered(txt: QString)
    + slot onMessageReceived(msg: QString)
    + signal messageReadyToSend(msg: QString)
    + signal messageForDisplay(txt: QString)
    --
    - formatMessage(txt: QString): QString
    - parseMessage(msg: QString): QString
}

' Communication réseau via UDP (QtNetwork)
class NetworkManager {
    + slot sendMessage(msg: QString)
    + signal messageReceived(msg: QString)
    --
    - bind(port: int)
    - targetAddress: QHostAddress
    - targetPort: int
}

' Interface pour les éléments affichables sur le tableau blanc
interface DataElement {
    - coordinates: QPointF
    - color: QColor
    - rotation: int
}

' Exemple : élément texte
class TextElement implements DataElement {
    - text: QString
    - font: QFont
    - size: int
}

' Stockage local du tableau blanc (liste d’éléments)
class DataManager {
    - elements: QList<DataElement*>
    + addElement(elem: DataElement*)
    + getElements(): QList<DataElement*>
}

' Relations/Interactions
WhiteboardApp "1" o-- "1" DisplayController : crée/possède
WhiteboardApp "1" o-- "1" BusinessController : crée/possède
WhiteboardApp "1" o-- "1" NetworkManager : crée/possède
WhiteboardApp "1" o-- "1" DataManager : crée/possède

DisplayController "1" ..> "1" BusinessController : signal/slot (textEntered)
BusinessController "1" ..> "1" NetworkManager : signal (messageReadyToSend)\nslot (onMessageReceived)
NetworkManager "1" ..> "1" BusinessController : signal (messageReceived)
BusinessController "1" ..> "1" DisplayController : signal (messageForDisplay)\nslot (displayText)
BusinessController "1" ..> "1" DataManager : ajout/lecture d’éléments

DataManager "1" *-- "*" DataElement : possède
TextElement ..|> DataElement

' Notes explicatives
note right of DataElement
Interface de base pour
tout élément visible :
texte, dessin, image, etc.
end note

note right of TextElement
Spécialisation pour \nle texte.
end note

note right of DataManager
Stocke tous types d’éléments
DataElement* (polymorphisme).
end note

@enduml