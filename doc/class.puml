@startuml name "Class Diagram"
' Skin and style
skinparam classAttributeIconSize 0

' ================================
' Main Application Classes
' ================================
class MainWindow {
    - CanvasView* canvasView
    - ToolBar* toolBar
    - SessionManager* sessionManager
    + MainWindow()
    + initUI()
    + initNetworking()
}

class ToolBar {
    - QList<Tool*> tools
    + ToolBar()
    + addTool(Tool*)
    + selectTool(Tool*)
}

MainWindow --> CanvasView : uses
MainWindow --> ToolBar : has
MainWindow --> SessionManager : manages

' ================================
' Canvas/View/Scene Layer
' ================================
class CanvasView {
    + CanvasView(QWidget* parent = nullptr)
    + setScene(CanvasScene*)
    + wheelEvent(QWheelEvent*)
    + mousePressEvent(QMouseEvent*)
    + mouseMoveEvent(QMouseEvent*)
    + mouseReleaseEvent(QMouseEvent*)
}

class CanvasScene {
    - QList<Shape*> shapes
    - Shape* selectedShape
    + CanvasScene(QObject* parent = nullptr)
    + addShape(Shape*)
    + removeShape(Shape*)
    + selectShapeAt(QPointF)
    + clearScene()
    + toJson() : QJsonArray
    + fromJson(QJsonArray)
}

CanvasView --> CanvasScene : displays
CanvasScene "1" o-- "*" Shape : contains

' ================================
' Shape Hierarchy
' ================================
abstract class Shape {
    - QString id
    - QString authorId
    - QPen pen
    - QBrush brush
    + QString getId()
    + QString getAuthorId()
    + void setPosition(QPointF)
    + QRectF boundingRect()
    + virtual QJsonObject toJson()
    + virtual void fromJson(QJsonObject)
    + virtual void moveBy(qreal dx, qreal dy)
    + virtual void remove()
}

class TextShape {
    - QString content
    - QFont font
    + TextShape(QString authorId)
    + void setText(QString)
    + QString getText()
    + override QJsonObject toJson()
    + override void fromJson(QJsonObject)
}

class FreehandShape {
    - QPainterPath path
    + FreehandShape(QString authorId)
    + void addPoint(QPointF)
    + override QJsonObject toJson()
    + override void fromJson(QJsonObject)
}

class LineShape {
    - QPointF start
    - QPointF end
    + LineShape(QString authorId)
    + void setStart(QPointF)
    + void setEnd(QPointF)
    + override QJsonObject toJson()
    + override void fromJson(QJsonObject)
}

class RectShape {
    - QRectF rect
    + RectShape(QString authorId)
    + void setRect(QRectF)
    + override QJsonObject toJson()
    + override void fromJson(QJsonObject)
}

class CircleShape {
    - QRectF bounds
    + CircleShape(QString authorId)
    + void setBounds(QRectF)
    + override QJsonObject toJson()
    + override void fromJson(QJsonObject)
}

class ArrowShape {
    - QPointF start
    - QPointF end
    + ArrowShape(QString authorId)
    + void setStart(QPointF)
    + void setEnd(QPointF)
    + override QJsonObject toJson()
    + override void fromJson(QJsonObject)
}

class ImageShape {
    - QImage image
    - QRectF rect
    + ImageShape(QString authorId)
    + void setImage(QImage)
    + void setRect(QRectF)
    + override QJsonObject toJson()
    + override void fromJson(QJsonObject)
}

Shape <|-- TextShape
Shape <|-- FreehandShape
Shape <|-- LineShape
Shape <|-- RectShape
Shape <|-- CircleShape
Shape <|-- ArrowShape
Shape <|-- ImageShape

' ================================
' Tools/Interaction Layer
' ================================
abstract class Tool {
    + Tool(CanvasScene*)
    + virtual void onMousePress(QMouseEvent*)
    + virtual void onMouseMove(QMouseEvent*)
    + virtual void onMouseRelease(QMouseEvent*)
}

class SelectTool {
    + SelectTool(CanvasScene*)
    + override void onMousePress(QMouseEvent*)
    + override void onMouseMove(QMouseEvent*)
    + override void onMouseRelease(QMouseEvent*)
}

class TextTool {
    + TextTool(CanvasScene*)
    + override void onMousePress(QMouseEvent*)
    + override void onMouseRelease(QMouseEvent*)
}

class FreehandTool {
    + FreehandTool(CanvasScene*)
    + override void onMousePress(QMouseEvent*)
    + override void onMouseMove(QMouseEvent*)
    + override void onMouseRelease(QMouseEvent*)
}

class LineTool {
    + LineTool(CanvasScene*)
    + override void onMousePress(QMouseEvent*)
    + override void onMouseMove(QMouseEvent*)
    + override void onMouseRelease(QMouseEvent*)
}

class RectTool {
    + RectTool(CanvasScene*)
    + override void onMousePress(QMouseEvent*)
    + override void onMouseMove(QMouseEvent*)
    + override void onMouseRelease(QMouseEvent*)
}

class CircleTool {
    + CircleTool(CanvasScene*)
    + override void onMousePress(QMouseEvent*)
    + override void onMouseMove(QMouseEvent*)
    + override void onMouseRelease(QMouseEvent*)
}

class ArrowTool {
    + ArrowTool(CanvasScene*)
    + override void onMousePress(QMouseEvent*)
    + override void onMouseMove(QMouseEvent*)
    + override void onMouseRelease(QMouseEvent*)
}

class PanTool {
    + PanTool(CanvasView*)
    + override void onMousePress(QMouseEvent*)
    + override void onMouseMove(QMouseEvent*)
    + override void onMouseRelease(QMouseEvent*)
}

class EraseTool {
    + EraseTool(CanvasScene*)
    + override void onMousePress(QMouseEvent*)
}

Tool <|-- SelectTool
Tool <|-- TextTool
Tool <|-- FreehandTool
Tool <|-- LineTool
Tool <|-- RectTool
Tool <|-- CircleTool
Tool <|-- ArrowTool
Tool <|-- PanTool
Tool <|-- EraseTool

CanvasView --> Tool : delegates events to
Tool --> CanvasScene : manipulates

' ================================
' Networking and Synchronization
' ================================
class SessionManager {
    - QString sessionId
    - User* localUser
    - QList<PeerConnection*> peers
    - QList<QString> bannedList
    + SessionManager()
    + QString createSession()
    + bool joinSession(QString sessionId)
    + void leaveSession()
    + void broadcastMessage(Message*)
    + void banUser(QString userId)
    + void setPermissions(QString userId, Permissions)
}

class PeerConnection {
    - QTcpSocket* socket
    - QString peerId
    + PeerConnection(QTcpSocket*)
    + void sendMessage(Message*)
    + Message* receiveMessage()
}

class User {
    - QString userId
    - QString username
    - bool isAdmin
    - Permissions permissions
    + User(QString userId, QString username, bool isAdmin)
    + QString getUserId()
    + QString getUsername()
    + bool hasPermission(PermissionType)
}

enum PermissionType {
    CAN_DRAW,
    CAN_DELETE,
    CAN_MODIFY,
    CAN_BAN,
    CAN_MANAGE_PERMISSIONS
}

class Permissions {
    - QMap<PermissionType, bool> flags
    + Permissions()
    + void setPermission(PermissionType, bool)
    + bool checkPermission(PermissionType)
}

SessionManager "1" o-- "*" PeerConnection : manages
SessionManager -> User : localUser
User --> Permissions : has

' ================================
' Messaging and Serialization
' ================================
class Message {
    - QString type
    - QJsonObject payload
    + Message(QString type, QJsonObject payload)
    + QJsonObject toJson()
    + static Message* fromJson(QJsonObject)
}

class JSONSerializer {
    + static QJsonObject shapeToJson(Shape*)
    + static Shape* jsonToShape(QJsonObject)
    + static QJsonObject messageToJson(Message*)
    + static Message* jsonToMessage(QJsonObject)
}

SessionManager --> Message : creates
PeerConnection --> Message : sends/receives
CanvasScene --> JSONSerializer : serializes/deserializes
Shape --> JSONSerializer : uses for toJson()/fromJson()

' ================================
' Legend / Notes
' ================================
note left of MainWindow
  - MainWindow initializes UI and networking.
  - orchestrates CanvasView, ToolBar, and SessionManager.
end note

note right of SessionManager
  - SessionManager holds session state:
    • sessionId
    • list of peers
    • banned users
    • permissions
  - Responsible for P2P join/create and broadcasting.
end note

@enduml
